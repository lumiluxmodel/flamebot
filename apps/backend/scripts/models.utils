-- ============================================
-- GESTIÓN DE USERNAMES Y POINTERS
-- ============================================

-- Ver todos los modelos disponibles
SELECT * FROM models ORDER BY name;

-- Ver todos los canales disponibles
SELECT * FROM channels ORDER BY name;

-- ============================================
-- CONSULTAS DE VISUALIZACIÓN
-- ============================================

-- Ver TODOS los usernames con información completa
SELECT 
    u.id,
    m.name as model,
    c.name as channel,
    u.username,
    u.created_at,
    up.current_index as pointer_position
FROM usernames u
JOIN models m ON u.model_id = m.id
JOIN channels c ON u.channel_id = c.id
LEFT JOIN username_pointers up ON up.model_id = m.id AND up.channel_id = c.id
ORDER BY m.name, c.name, u.created_at;

-- Ver usernames de un modelo específico (ejemplo: aura)
SELECT 
    u.id,
    m.name as model,
    c.name as channel,
    u.username,
    u.created_at
FROM usernames u
JOIN models m ON u.model_id = m.id
JOIN channels c ON u.channel_id = c.id
WHERE LOWER(m.name) = 'aura'
ORDER BY c.name, u.created_at;

-- Ver estadísticas por modelo/canal
SELECT 
    m.name as model,
    c.name as channel,
    COUNT(u.id) as total_usernames,
    up.current_index as current_pointer
FROM models m
CROSS JOIN channels c
LEFT JOIN usernames u ON u.model_id = m.id AND u.channel_id = c.id
LEFT JOIN username_pointers up ON up.model_id = m.id AND up.channel_id = c.id
GROUP BY m.name, c.name, up.current_index
ORDER BY m.name, c.name;

-- Ver el estado actual de todos los pointers
SELECT 
    m.name as model,
    c.name as channel,
    up.current_index,
    up.updated_at as last_used
FROM username_pointers up
JOIN models m ON up.model_id = m.id
JOIN channels c ON up.channel_id = c.id
ORDER BY m.name, c.name;

-- ============================================
-- INSERTAR USERNAMES
-- ============================================

-- Insertar un username individual (ejemplo: aura/gram)
INSERT INTO usernames (model_id, channel_id, username)
VALUES (
    (SELECT id FROM models WHERE LOWER(name) = 'aura'),
    (SELECT id FROM channels WHERE LOWER(name) = 'gram'),
    'nuevo_username_aqui'
);

-- Insertar múltiples usernames para aura/gram
INSERT INTO usernames (model_id, channel_id, username)
VALUES 
    ((SELECT id FROM models WHERE LOWER(name) = 'aura'), (SELECT id FROM channels WHERE LOWER(name) = 'gram'), 'username1'),
    ((SELECT id FROM models WHERE LOWER(name) = 'aura'), (SELECT id FROM channels WHERE LOWER(name) = 'gram'), 'username2'),
    ((SELECT id FROM models WHERE LOWER(name) = 'aura'), (SELECT id FROM channels WHERE LOWER(name) = 'gram'), 'username3');

-- Insertar username evitando duplicados
INSERT INTO usernames (model_id, channel_id, username)
VALUES (
    (SELECT id FROM models WHERE LOWER(name) = 'lola'),
    (SELECT id FROM channels WHERE LOWER(name) = 'snap'),
    'lola_snap_username'
) ON CONFLICT (model_id, channel_id, username) DO NOTHING;

-- ============================================
-- ACTUALIZAR USERNAMES
-- ============================================

-- Cambiar un username específico por ID
UPDATE usernames 
SET username = 'nuevo_nombre'
WHERE id = 123;

-- Cambiar un username específico por nombre actual
UPDATE usernames 
SET username = 'nuevo_nombre'
WHERE username = 'nombre_anterior'
AND model_id = (SELECT id FROM models WHERE LOWER(name) = 'aura')
AND channel_id = (SELECT id FROM channels WHERE LOWER(name) = 'gram');

-- ============================================
-- ELIMINAR USERNAMES
-- ============================================

-- Eliminar un username específico por ID
DELETE FROM usernames WHERE id = 123;

-- Eliminar un username específico por nombre
DELETE FROM usernames 
WHERE username = 'username_a_eliminar'
AND model_id = (SELECT id FROM models WHERE LOWER(name) = 'aura')
AND channel_id = (SELECT id FROM channels WHERE LOWER(name) = 'gram');

-- Eliminar TODOS los usernames de un modelo/canal
DELETE FROM usernames 
WHERE model_id = (SELECT id FROM models WHERE LOWER(name) = 'aura')
AND channel_id = (SELECT id FROM channels WHERE LOWER(name) = 'gram');

-- Eliminar usernames duplicados (mantener el más antiguo)
DELETE FROM usernames u1
USING usernames u2
WHERE u1.id > u2.id
AND u1.username = u2.username
AND u1.model_id = u2.model_id
AND u1.channel_id = u2.channel_id;

-- ============================================
-- GESTIÓN DE POINTERS
-- ============================================

-- Resetear un pointer a 0
UPDATE username_pointers 
SET current_index = 0, updated_at = CURRENT_TIMESTAMP
WHERE model_id = (SELECT id FROM models WHERE LOWER(name) = 'aura')
AND channel_id = (SELECT id FROM channels WHERE LOWER(name) = 'gram');

-- Establecer un pointer en una posición específica
UPDATE username_pointers 
SET current_index = 10, updated_at = CURRENT_TIMESTAMP
WHERE model_id = (SELECT id FROM models WHERE LOWER(name) = 'lola')
AND channel_id = (SELECT id FROM channels WHERE LOWER(name) = 'of');

-- Resetear TODOS los pointers
UPDATE username_pointers 
SET current_index = 0, updated_at = CURRENT_TIMESTAMP;

-- Crear pointer si no existe (útil para nuevas combinaciones)
INSERT INTO username_pointers (model_id, channel_id, current_index)
VALUES (
    (SELECT id FROM models WHERE LOWER(name) = 'iris'),
    (SELECT id FROM channels WHERE LOWER(name) = 'snap'),
    0
) ON CONFLICT (model_id, channel_id) DO NOTHING;

-- ============================================
-- OPERACIONES MASIVAS
-- ============================================

-- Reemplazar TODOS los usernames de un modelo/canal
BEGIN;
-- Primero eliminar los existentes
DELETE FROM usernames 
WHERE model_id = (SELECT id FROM models WHERE LOWER(name) = 'aura')
AND channel_id = (SELECT id FROM channels WHERE LOWER(name) = 'gram');

-- Luego insertar los nuevos
INSERT INTO usernames (model_id, channel_id, username)
VALUES 
    ((SELECT id FROM models WHERE LOWER(name) = 'aura'), (SELECT id FROM channels WHERE LOWER(name) = 'gram'), 'nuevo1'),
    ((SELECT id FROM models WHERE LOWER(name) = 'aura'), (SELECT id FROM channels WHERE LOWER(name) = 'gram'), 'nuevo2'),
    ((SELECT id FROM models WHERE LOWER(name) = 'aura'), (SELECT id FROM channels WHERE LOWER(name) = 'gram'), 'nuevo3');

-- Resetear el pointer
UPDATE username_pointers 
SET current_index = 0, updated_at = CURRENT_TIMESTAMP
WHERE model_id = (SELECT id FROM models WHERE LOWER(name) = 'aura')
AND channel_id = (SELECT id FROM channels WHERE LOWER(name) = 'gram');
COMMIT;

-- ============================================
-- BÚSQUEDAS Y FILTROS
-- ============================================

-- Buscar usernames que contengan un texto
SELECT 
    m.name as model,
    c.name as channel,
    u.username
FROM usernames u
JOIN models m ON u.model_id = m.id
JOIN channels c ON u.channel_id = c.id
WHERE u.username LIKE '%mistress%'
ORDER BY m.name, c.name;

-- Ver el próximo username que se usará para cada combinación
SELECT 
    m.name as model,
    c.name as channel,
    up.current_index as next_index,
    (SELECT username FROM usernames u2 
     WHERE u2.model_id = m.id AND u2.channel_id = c.id 
     ORDER BY created_at 
     LIMIT 1 OFFSET up.current_index) as next_username
FROM username_pointers up
JOIN models m ON up.model_id = m.id
JOIN channels c ON up.channel_id = c.id
ORDER BY m.name, c.name;

-- ============================================
-- MANTENIMIENTO Y LIMPIEZA
-- ============================================

-- Limpiar espacios en blanco de los usernames
UPDATE usernames 
SET username = TRIM(username)
WHERE username != TRIM(username);

-- Encontrar y listar usernames vacíos o con solo espacios
SELECT * FROM usernames 
WHERE TRIM(username) = '' OR username IS NULL;

-- Eliminar usernames vacíos
DELETE FROM usernames 
WHERE TRIM(username) = '' OR username IS NULL;

-- Ver usernames ordenados por frecuencia de uso (más usados primero)
SELECT 
    username,
    COUNT(*) as veces_usado,
    STRING_AGG(m.name || '/' || c.name, ', ') as usado_en
FROM usernames u
JOIN models m ON u.model_id = m.id
JOIN channels c ON u.channel_id = c.id
GROUP BY username
HAVING COUNT(*) > 1
ORDER BY COUNT(*) DESC;

-- ============================================
-- EXPORTAR/IMPORTAR DATOS
-- ============================================

-- Exportar todos los usernames a formato CSV
COPY (
    SELECT 
        m.name as model,
        c.name as channel,
        u.username
    FROM usernames u
    JOIN models m ON u.model_id = m.id
    JOIN channels c ON u.channel_id = c.id
    ORDER BY m.name, c.name, u.created_at
) TO '/tmp/usernames_export.csv' WITH CSV HEADER;

-- Ver estructura para importación masiva
SELECT 
    'INSERT INTO usernames (model_id, channel_id, username) VALUES (' ||
    '(SELECT id FROM models WHERE LOWER(name) = ''' || LOWER(m.name) || '''), ' ||
    '(SELECT id FROM channels WHERE LOWER(name) = ''' || LOWER(c.name) || '''), ' ||
    '''' || u.username || ''');' as insert_statement
FROM usernames u
JOIN models m ON u.model_id = m.id
JOIN channels c ON u.channel_id = c.id
WHERE m.name = 'aura' AND c.name = 'gram'
ORDER BY u.created_at;





///


///


-- ============================================
-- OPERACIONES RÁPIDAS PARA NUEVOS USUARIOS
-- ============================================

-- 1. CONFIGURAR USERNAMES PARA UN NUEVO CLIENTE
-- Cambia 'cliente1' por el nombre real del cliente

-- Paso 1: Limpiar todos los usernames existentes
TRUNCATE TABLE usernames CASCADE;
UPDATE username_pointers SET current_index = 0;

-- Paso 2: Insertar nuevos usernames para AURA
INSERT INTO usernames (model_id, channel_id, username) VALUES
-- AURA Instagram
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'gram'), 'aura_cliente1_ig1'),
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'gram'), 'aura_cliente1_ig2'),
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'gram'), 'aura_cliente1_ig3'),
-- AURA Snapchat
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'snap'), 'aura_cliente1_snap1'),
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'snap'), 'aura_cliente1_snap2'),
-- AURA OnlyFans
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'of'), 'aura_cliente1_of1'),
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'of'), 'aura_cliente1_of2');

-- Paso 3: Insertar usernames para LOLA
INSERT INTO usernames (model_id, channel_id, username) VALUES
-- LOLA Instagram
((SELECT id FROM models WHERE name = 'lola'), (SELECT id FROM channels WHERE name = 'gram'), 'lola_cliente1_ig1'),
((SELECT id FROM models WHERE name = 'lola'), (SELECT id FROM channels WHERE name = 'gram'), 'lola_cliente1_ig2'),
((SELECT id FROM models WHERE name = 'lola'), (SELECT id FROM channels WHERE name = 'gram'), 'lola_cliente1_ig3'),
-- LOLA Snapchat
((SELECT id FROM models WHERE name = 'lola'), (SELECT id FROM channels WHERE name = 'snap'), 'lola_cliente1_snap1'),
-- LOLA OnlyFans
((SELECT id FROM models WHERE name = 'lola'), (SELECT id FROM channels WHERE name = 'of'), 'lola_cliente1_of1');

-- Paso 4: Insertar usernames para IRIS
INSERT INTO usernames (model_id, channel_id, username) VALUES
-- IRIS Instagram
((SELECT id FROM models WHERE name = 'iris'), (SELECT id FROM channels WHERE name = 'gram'), 'iris_cliente1_ig1'),
((SELECT id FROM models WHERE name = 'iris'), (SELECT id FROM channels WHERE name = 'gram'), 'iris_cliente1_ig2'),
-- IRIS Snapchat
((SELECT id FROM models WHERE name = 'iris'), (SELECT id FROM channels WHERE name = 'snap'), 'iris_cliente1_snap1'),
-- IRIS OnlyFans
((SELECT id FROM models WHERE name = 'iris'), (SELECT id FROM channels WHERE name = 'of'), 'iris_cliente1_of1');

-- Paso 5: Insertar usernames para CIARA
INSERT INTO usernames (model_id, channel_id, username) VALUES
-- CIARA Instagram
((SELECT id FROM models WHERE name = 'ciara'), (SELECT id FROM channels WHERE name = 'gram'), 'ciara_cliente1_ig1'),
((SELECT id FROM models WHERE name = 'ciara'), (SELECT id FROM channels WHERE name = 'gram'), 'ciara_cliente1_ig2'),
-- CIARA Snapchat
((SELECT id FROM models WHERE name = 'ciara'), (SELECT id FROM channels WHERE name = 'snap'), 'ciara_cliente1_snap1'),
-- CIARA OnlyFans
((SELECT id FROM models WHERE name = 'ciara'), (SELECT id FROM channels WHERE name = 'of'), 'ciara_cliente1_of1');

-- ============================================
-- 2. VERIFICAR CONFIGURACIÓN
-- ============================================

-- Ver resumen de usernames configurados
SELECT 
    m.name as modelo,
    c.name as canal,
    COUNT(*) as total_usernames,
    STRING_AGG(u.username, ', ' ORDER BY u.created_at) as usernames
FROM usernames u
JOIN models m ON u.model_id = m.id
JOIN channels c ON u.channel_id = c.id
GROUP BY m.name, c.name
ORDER BY m.name, c.name;

-- ============================================
-- 3. PLANTILLA PARA BULK INSERT
-- ============================================

-- Template para insertar muchos usernames de una vez
-- Copia y modifica según necesites
INSERT INTO usernames (model_id, channel_id, username) VALUES
-- Modelo: aura, Canal: gram
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'gram'), 'username_aqui_1'),
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'gram'), 'username_aqui_2'),
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'gram'), 'username_aqui_3'),
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'gram'), 'username_aqui_4'),
((SELECT id FROM models WHERE name = 'aura'), (SELECT id FROM channels WHERE name = 'gram'), 'username_aqui_5');

-- ============================================
-- 4. RESETEAR TODO PARA NUEVO CLIENTE
-- ============================================

-- CUIDADO: Esto borra TODOS los usernames
BEGIN;
-- Limpiar usernames
DELETE FROM usernames;
-- Resetear todos los pointers
UPDATE username_pointers SET current_index = 0;
-- Verificar que está vacío
SELECT COUNT(*) as total_usernames FROM usernames;
COMMIT;

-- ============================================
-- 5. BACKUP ANTES DE CAMBIOS
-- ============================================

-- Crear tabla de backup
CREATE TABLE IF NOT EXISTS usernames_backup AS 
SELECT * FROM usernames;

-- Guardar estado actual de pointers
CREATE TABLE IF NOT EXISTS pointers_backup AS 
SELECT * FROM username_pointers;

-- ============================================
-- 6. RESTAURAR DESDE BACKUP
-- ============================================

-- Restaurar usernames
TRUNCATE usernames CASCADE;
INSERT INTO usernames SELECT * FROM usernames_backup;

-- Restaurar pointers
UPDATE username_pointers up
SET current_index = pb.current_index
FROM pointers_backup pb
WHERE up.model_id = pb.model_id 
AND up.channel_id = pb.channel_id;

-- ============================================
-- 7. QUERIES DE DIAGNÓSTICO
-- ============================================

-- Ver qué combinaciones NO tienen usernames
SELECT 
    m.name as modelo,
    c.name as canal,
    'SIN USERNAMES' as estado
FROM models m
CROSS JOIN channels c
LEFT JOIN usernames u ON u.model_id = m.id AND u.channel_id = c.id
WHERE u.id IS NULL
ORDER BY m.name, c.name;

-- Ver pointers que están fuera de rango
SELECT 
    m.name as modelo,
    c.name as canal,
    up.current_index as pointer,
    COUNT(u.id) as total_usernames,
    CASE 
        WHEN up.current_index >= COUNT(u.id) THEN 'POINTER FUERA DE RANGO!'
        ELSE 'OK'
    END as estado
FROM username_pointers up
JOIN models m ON up.model_id = m.id
JOIN channels c ON up.channel_id = c.id
LEFT JOIN usernames u ON u.model_id = m.id AND u.channel_id = c.id
GROUP BY m.name, c.name, up.current_index
HAVING up.current_index >= COUNT(u.id);

-- ============================================
-- 8. IMPORTAR DESDE CSV
-- ============================================

-- Formato esperado del CSV: model,channel,username
-- Ejemplo para importar:
/*
COPY (
    SELECT 'aura' as model, 'gram' as channel, 'username1' as username
    UNION ALL
    SELECT 'aura', 'gram', 'username2'
    UNION ALL
    SELECT 'lola', 'snap', 'username3'
) TO '/tmp/import_template.csv' WITH CSV HEADER;
*/

-- Luego importar con:
-- psql -c "\copy temp_import FROM 'usernames.csv' WITH CSV HEADER
